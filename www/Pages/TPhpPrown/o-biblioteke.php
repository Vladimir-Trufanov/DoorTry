<?php
// PHP7                                                *** o-biblioteke.php ***

// ****************************************************************************
// * DoorTry-TPhpPrown     Страница общего представления библиотеки TPhpPrown *
// ****************************************************************************

//                                                   Автор:       Труфанов В.Е.
// v2.0                                              Дата создания:  24.12.2019
// Copyright © 2019 tve                              Посл.изменение: 30.03.2020

// Определяем константу вызова страницы, имя файла, регулярку вырезания 
// фрагмента исх.текста, заместитель выреза и команду выполнения теста
define ("ScriptName", "o-biblioteke"); 
// FuncName="No", так как на странице должна быть только описательная часть
define ("FuncName",   "No"); 

require_once $SiteRoot."/iniTPhpPrown.php";

function SeoTags()
{
// Определяем SEO-теги
   echo '<title>Общее представление библиотеки TPhpPrown</title>';
   echo '<meta name="description" content=
"Библиотека PHP-прикладных функций TPhpPrown - результат практического 
программирования сайтов на PHP. Каждая функция библиотеки выполняет свою 
прикладную задачу: проверяет какое-либо условие в свершившемся событии или 
какую-нибудь возможность для предстоящего действия, или выполняет само это 
действие, проверяет определенные характеристики или устанавливает некоторые
 значения">';
   echo '<meta name="keywords" content=
"принцип программирования DO-or-TRY, делай или пробуй, TPhpPrown">';
}

function DescriptPart()
{
?>
<div id="AboutTPhpPrown">
<p><span class="letter">Б</span>иблиотека TPhpPrown возникла из практической работы - из вопросов и необходимостей, которые появлялись при программировании сайтов на PHP; из различий между 5 и 7 версиями, которые необходимо было обыгрывать.</p>
<p><span class="letter">К</span>аждая функция библиотеки выполняет свою прикладную задачу: проверяет какое-либо условие в свершившемся событии или какую-нибудь возможность для предстоящего действия и выполняет само это действие, проверяет определенные характеристики или устанавливает некоторые значения.</p>
<p><span class="letter">В</span> состав библиотеки кроме функций, выполняющих определенные задачи входят и вспомогательные модули - инициализации, которые содержат в себе, как на складе, общие для всех функций константы, переменные, сообщения и другие сущности.</p>
<blockquote>
<p>«Под прикладной задачей следует понимать сюжетную задачу, сформулированную в виде задачи-проблемы и удовлетворяющую следующим условиям:</p>
<p>вопрос должен быть поставлен в таком виде, в каком он обычно ставится на практике (решение имеет практическую значимость);</p>
<p>все величины (если они заданы) должны быть реальными, взятыми из жизни»</p>
<p>М.В. Крутихина</p>  
</blockquote>
<p><span class="letter">Ф</span>ункции разбиты на группы в зависимости от своего назначения, каждая группа выделяется префиксом в своем имени (префикс может и отсутствовать “по жизни” - в той ситуации, когда функция возникала, префикс не был очевиден).</p>

<h3>1. Общие (необязательные) префиксы и назначения программных модулей библиотеки:</h3>
<p><strong>is</strong> - функция проверяет некоторое условие и возвращает true или false (например: <span class="letter">isSubstrInUri</span> - проверяет присутствие фрагмента в поступившем запросе сайта; <span class="letter">isCalcInBrowser</span> - проверяет возможность выполнения функции Calc в CSS текущего браузера);</p>
<p><strong>ini</strong> - вспомогательный модуль (инициализация), устанавливающий общие для всех функций библиотеки константы, переменные, сообщения и другие сущности (например: <span class="letter">iniErrMessage</span> - определяет общие сообщения библиотеки; <span class="letter">iniRegExp</span> - определяет популярные регулярные выражения PHP);</p>
<p><strong>get</strong> - функция возвращает характеристику некоторого объекта или получает значение в результате заданного действия (например: <span class="letter">getSiteDevice</span> - определяет тип устройства, с которого запрошен сайт; <span class="letter">getTranslit</span> - выполняет прикладную транслитерацию (tve) русских букв);</p>
<p><strong>Make</strong> - функция выполняет заданное действие и возвращает целочисленный признак состояния после этого действия (например: <span class="letter">MakeCookie</span> - устанавливает новое значение COOKIE в браузере и заменяет значение во внутреннем массиве $_COOKIE; <span class="letter">MakeRegExp</span> - отрабатывает регулярное выражение на тексте и трассирует разбор);</p>
<p><strong>View</strong> - функция представляет на экране сайта значения некоторого объекта (например: <span class="letter">ViewArray</span> - показывает содержимое простого массива; <span class="letter">ViewGlobal</span> - показывает значения глобальных переменных);</p>

<h3>2. Алфавитный список функций библиотеки и вспомогательных модулей/инициализаций:</h3>
<?php
TPhpPrownList();
?>
<h4 id="makeregexp"><a href="#makeregexp">MakeRegExp</a> - отработать регулярное выражение на тексте и оттрассировать разбор. Рекомендуется использовать только для трассировки. Для выборки подстроки по регулярному выражению следует пользоваться другими функциями (например, Findes)</h4>
<h4 id="makesession"><a href="#makesession">MakeSession</a> - установить новое значение сессионной переменной и вернуть его для изменения глобальной переменной сайтовой страницы</h4>

<h3>3. Рекомендации по именованию переменных при программировании сайтов с использованием библиотеки TPhpPrown.</h3>
<p>Среди всех переменных, которые появляются при программировании сайтов, можно выделить четыре особенные группы:</p>
<p>а) <strong>переменные-кукисы</strong>. Это копии кукисов сайта в текущем браузере (то есть копии элементов суперглобального массива $_COOKIE). Базовой функцией для установки кукиса в PHP является функция <strong>setcookie()</strong>. Но в этом случае новое значение кукиса на странице сайта  появится только после её обновления. TPhpPrown предлагает использовать собственную функцию <strong>MakeCookie()</strong>.  Использование переменных-кукисов совместно с этой функцией позволяет работать с измененными значениями уже в текущем сценарии страницы;</p>
<p>б) <strong>параметры страниц сайта</strong>. Это переменные, которые являются характеристиками страниц и могут быть настроены пользователем сайта. В настоящее время это часть переменных-кукисов. В дальнейшем для параметров страниц сайта будут использоваться и данные в памяти браузера LocalStorage;</p>
<p>в) <strong>сессионные переменные</strong>. Это переменные, которые живут в течение одной сессии работы в браузере. Они являются копиями  элементов суперглобального массива $_SESSION. TPhpPrown предлагает, как стиль программирования, использовать сессионные переменные и переменные-кукисы. Это позволит отвлечься от соответствующих суперглобальных массивов и унифицировать работу с переменными.</p>
<p>TPhpPrown рекомендует применять следующие префиксы при  определении имен указанных групп переменных:</p>
<p><strong>$c_</strong> - для переменных-кукисов (например: $c_BrowEntry - число запросов сайта из браузера; $c_PersName - логин посетителя;  $c_PersEntry - счетчик посещений текущим посетителем);</p>
<p><strong>$p_</strong> - для параметров страниц сайта (например: $p_NewsForm - форма представления новостей; $p_NewsAmt - количество новостей в форме;  $p_HeightIns - количество строк в окне инструкции);</p>
<p><strong>$s_</strong> - для сессионных переменных (например: $s_Counter - число обращений к странице за сессию; $s_NameNews - активированная лента новостей);</p>
</div>
<?php
}
// <!-- --> ********************************************** o-biblioteke.php ***
